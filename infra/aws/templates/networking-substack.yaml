AWSTemplateFormatVersion: "2010-09-09"
Description: "AtomikLabs Networking Substack Definitions"

Parameters:
    EnvironmentName:
        Type: String
        Description: "The name of the environment"
        Default: "dev"
        AllowedValues:
            - "test"
            - "dev"
            - "stage"
            - "prod"
    VpcCidr:
        Type: String
        Description: "The CIDR block for the VPC"
        Default: "10.0.0.0/16"
    PublicSubnet1Cidr:
        Type: String
        Description: "The CIDR block for the public subnet 1"
        Default: "10.0.1.0/24"
    PublicSubnet2Cidr:
        Type: String
        Description: "The CIDR block for the public subnet 2"
        Default: "10.0.2.0/24"
    PrivateSubnet1Cidr:
        Type: String
        Description: "The CIDR block for the private subnet 1"
        Default: "10.0.101.0/24"
    PrivateSubnet2Cidr:
        Type: String
        Description: "The CIDR block for the private subnet 2"
        Default: "10.0.102.0/24"
Resources:
    ALVPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCidr
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-vpc
                - Key: "AtomikLabs:Environment"
                  Value: !Ref EnvironmentName
    ALPublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref ALVPC
            CidrBlock: !Ref PublicSubnet1Cidr
            AvailabilityZone: !Select
                - 0
                - !GetAZs ""
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-public-subnet-1
                - Key: "AtomikLabs:Environment"
                  Value: !Ref EnvironmentName
    ALPublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref ALVPC
            CidrBlock: !Ref PublicSubnet2Cidr
            AvailabilityZone: !Select
                - 1
                - !GetAZs ""
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-public-subnet-2
                - Key: "AtomikLabs:Environment"
                  Value: !Ref EnvironmentName
    ALInternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName}-igw"
                - Key: "AtomikLabs:Environment"
                  Value: !Ref EnvironmentName
    ALVPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref ALVPC
            InternetGatewayId: !Ref ALInternetGateway
    ALPublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref ALVPC
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName}-public-route-table"
                - Key: "AtomikLabs:Environment"
                  Value: !Ref EnvironmentName
    ALInternetGatewayRoute:
        Type: AWS::EC2::Route
        DependsOn: ALVPCGatewayAttachment
        Properties:
            RouteTableId: !Ref ALPublicRouteTable
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref ALInternetGateway
    ALPublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref ALPublicSubnet1
            RouteTableId: !Ref ALPublicRouteTable
    ALPublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref ALPublicSubnet2
            RouteTableId: !Ref ALPublicRouteTable
    ALPublicNetworkACL:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref ALVPC
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName}-public-nacl"
                - Key: "AtomikLabs:Environment"
                  Value: !Ref EnvironmentName
    ALInboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ALPublicNetworkACL
            RuleNumber: 100
            Protocol: 6  # TCP
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 80
                To: 80
    ALInboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ALPublicNetworkACL
            RuleNumber: 110
            Protocol: 6  # TCP
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 443
                To: 443
    ALOutboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ALPublicNetworkACL
            RuleNumber: 100
            Protocol: 6  # TCP
            RuleAction: allow
            Egress: true
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 80
                To: 80
    ALOutboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ALPublicNetworkACL
            RuleNumber: 110
            Protocol: 6  # TCP
            RuleAction: allow
            Egress: true
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 443
                To: 443
    ALAssociatePublicNACL1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref ALPublicSubnet1
            NetworkAclId: !Ref ALPublicNetworkACL
    ALAssociatePublicNACL2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref ALPublicSubnet2
            NetworkAclId: !Ref ALPublicNetworkACL
    Cloud9SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Security group for Cloud9"
            VpcId: !Ref ALVPC
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName}-cloud9-sg"
    ALAuroraSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Security group for Aurora Serverless"
            VpcId: !Ref ALVPC
            SecurityGroupIngress:
                - IpProtocol: "tcp"
                  FromPort: 5432
                  ToPort: 5432
                  SourceSecurityGroupId: !Ref Cloud9SecurityGroup
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName}-aurora-sg"
    ALDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
        DBSubnetGroupDescription: "Subnet Group for AtomikLabs Aurora Serverless Cluster"
        SubnetIds:
            - !Ref ALPublicSubnet1
            - !Ref ALPublicSubnet2
        Tags:
            - Key: "Environment"
            Value: !Ref EnvironmentName

Outputs:
    VPCId:
        Description: "ID of the VPC"
        Value: !Ref ALVPC
    PublicSubnet1Id:
        Description: "ID of the first public subnet"
        Value: !Ref ALPublicSubnet1
    PublicSubnet2Id:
        Description: "ID of the second public subnet"
        Value: !Ref ALPublicSubnet2
    InternetGatewayId:
        Description: "ID of the Internet Gateway"
        Value: !Ref ALInternetGateway
    PublicRouteTableId:
        Description: "ID of the public route table"
        Value: !Ref ALPublicRouteTable
    PublicNetworkAclId:
        Description: "ID of the public network ACL"
        Value: !Ref ALPublicNetworkACL
    Cloud9SecurityGroupId:
        Description: "ID of the Cloud9 Security Group"
        Value: !Ref Cloud9SecurityGroup
    AuroraSecurityGroupId:
        Description: "ID of the Aurora Serverless Security Group"
        Value: !Ref ALAuroraSecurityGroup
    PublicSubnetGroup:
        Description: "ID of the Aurora Serverless Public Subnet Group"
        Value: !Ref ALDBSubnetGroup
