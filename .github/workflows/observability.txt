observability:
    needs: core_infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install jq

      - name: Read AtomikLabs config and Set Environment Variables
        run: |
          config_file=".atomiklabs.json"
          echo "AWS_REGION=$(jq -r '.infra.terraform_aws_region' "$config_file")" >> $GITHUB_ENV
          echo "BASTION_HOST_KEY_PAIR_NAME=$(jq -r '.networking.bastion_host_key_pair_name' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_BUCKET=$(jq -r '.infra.infra_config_bucket' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_PREFIX=$(jq -r '.infra.infra_config_prefix' "$config_file")" >> $GITHUB_ENV
          echo "OUTPUTS_PREFIX=$(jq -r '.infra.outputs_prefix' "$config_file")" >> $GITHUB_ENV
          echo "REPO=$(jq -r '.infra.repo' "$config_file")" >> $GITHUB_ENV

      - name: Load Environment Variables
        id: load-env-vars
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            ENV_NAME=$(echo "${{ github.base_ref }}" | tr '/' '-')
          else
            ENV_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
          fi
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
          env_file="infra/core/environments/env.$ENV_NAME.json"
          echo "ENV_FILE=$env_file" >> $GITHUB_ENV
          echo "::set-output name=env_file::$env_file"
          iam_user_name=$(jq -r '.iam_user_name' $env_file)
          echo "IAM_USER_NAME=$iam_user_name" >> $GITHUB_ENV

      - name: Set AWS Credentials Based on Environment
        run: |
          if [ "$ENV_NAME" == "prod" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          elif [ "$ENV_NAME" == "stage" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          elif [ "$ENV_NAME" == "dev" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          else
            echo "Invalid environment name: $ENV_NAME"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform_outputs
          path: temp

      - name: Install Prometheus Config Script Dependencies
        run: |
          pip install -r ./infra/observability/prometheus/requirements.txt

      - name: Generate Prometheus Config
        run: |
          OBSERVER_IP=$(jq -r '.aws_instance_observer_private_ip.value' ./temp/terraform_outputs.json)
          RABBITMQ_IPS=$(jq -r '.aws_instance_rabbitmq_private_ips.value[]' ./temp/terraform_outputs.json | paste -sd " " -)
          BASTION_IP=$(jq -r '.aws_instance_bastion_private_ip.value' ./temp/terraform_outputs.json)
          ALL_IPS="$OBSERVER_IP $RABBITMQ_IPS $BASTION_IP"
          echo "Generating Prometheus config with IPs: $ALL_IPS"
          python ./infra/observability/prometheus/src/generate_prometheus_config.py ./temp/terraform_outputs.json ./temp/prometheus.yml --ips $ALL_IPS
          aws s3 cp ./temp/prometheus.yml s3://${{ env.INFRA_CONFIG_BUCKET }}/prometheus/prometheus.yml

      - name: Copy Prometheus config to EC2 instance and trigger reload
        run: |
          OBSERVER_INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.ENV_NAME }}-observability" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "OBSERVER_INSTANCE_IDS=$OBSERVER_INSTANCE_IDS" >> $GITHUB_ENV

          if [ -z "$OBSERVER_INSTANCE_IDS" ]; then
            echo "No instances found matching the criteria."
            exit 1
          fi

          IFS=' ' read -r -a OBSERVER_INSTANCE_ID_ARRAY <<< "$OBSERVER_INSTANCE_IDS"

          for ID in "${OBSERVER_INSTANCE_ID_ARRAY[@]}"; do
            aws ssm send-command \
              --instance-ids "$ID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands=["aws s3 cp s3://${{ env.INFRA_CONFIG_BUCKET }}/prometheus/prometheus.yml /etc/prometheus/prometheus.yml"] \
              --region ${{ env.AWS_REGION }}
          done

      - name: Generate Thanos bucket_config
        run: |
          PROMETHEUS_IP=$(jq -r '.aws_instance_prometheus_private_ip.value' ./temp/terraform_outputs.json)
          python ./infra/observability/thanos/src/generate_thanos_bucket_config.py ${INFRA_CONFIG_BUCKET} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} ./temp/bucket_config.yaml

      - name: Upload Thanos bucket_config to S3
        run: |
          aws s3 cp ./temp/bucket_config.yaml s3://${{ env.INFRA_CONFIG_BUCKET }}/thanos/bucket_config.yaml

      - name: Add Thanos bucket_config to Observer
        run: |
          OBSERVER_INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.ENV_NAME }}-observability" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "OBSERVER_INSTANCE_IDS=$OBSERVER_INSTANCE_IDS" >> $GITHUB_ENV

          if [ -z "$OBSERVER_INSTANCE_IDS" ]; then
            echo "No instances found matching the criteria."
            exit 1
          fi

          IFS=' ' read -r -a OBSERVER_INSTANCE_ID_ARRAY <<< "$OBSERVER_INSTANCE_IDS"

          for ID in "${OBSERVER_INSTANCE_ID_ARRAY[@]}"; do
            aws ssm send-command \
              --instance-ids "$ID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands=["aws s3 cp s3://${{ env.INFRA_CONFIG_BUCKET }}/thanos/bucket_config.yaml /etc/thanos/bucket_config.yaml"] \
              --region ${{ env.AWS_REGION }}
          done

      - name: Upload Docker Compose File to S3
        run: |
          aws s3 cp ./infra/observability/docker-compose.yml s3://${{ env.INFRA_CONFIG_BUCKET }}/observability/docker-compose.yml

      - name: Add Docker Compose to Observer
        run: |
          OBSERVER_INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.ENV_NAME }}-observability" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "OBSERVER_INSTANCE_IDS=$OBSERVER_INSTANCE_IDS" >> $GITHUB_ENV

          if [ -z "$OBSERVER_INSTANCE_IDS" ]; then
            echo "No instances found matching the criteria."
            exit 1
          fi

          IFS=' ' read -r -a OBSERVER_INSTANCE_ID_ARRAY <<< "$OBSERVER_INSTANCE_IDS"

          for ID in "${OBSERVER_INSTANCE_ID_ARRAY[@]}"; do
            aws ssm send-command \
              --instance-ids "$ID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands=["aws s3 cp s3://${{ env.INFRA_CONFIG_BUCKET }}/observability/docker-compose.yml /etc/observability/docker-compose.yml"] \
              --region ${{ env.AWS_REGION }}
          done

      - name: Run Docker Compose Up on EC2 Instance
        run: |
          if [ -z "${{ env.OBSERVER_INSTANCE_IDS }}" ]; then
            echo "No instances found matching the criteria."
            exit 1
          fi

          IFS=' ' read -r -a OBSERVER_INSTANCE_ID_ARRAY <<< "${{ env.OBSERVER_INSTANCE_IDS }}"

          for ID in "${OBSERVER_INSTANCE_ID_ARRAY[@]}"; do
            aws ssm send-command \
              --instance-ids "$ID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands=["sudo docker-compose -f /etc/observability/docker-compose.yml up -d"] \
              --region ${{ env.AWS_REGION }}
          done

      - name: Reload Prometheus via HTTP
        run: |
          OBSERVER_INSTANCE_IDS=$(aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=${{ env.ENV_NAME }}-observability" "Name=instance-state-name,Values=running" \
             --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "OBSERVER_INSTANCE_IDS=$OBSERVER_INSTANCE_IDS" >> $GITHUB_ENV

          if [ -z "$OBSERVER_INSTANCE_IDS" ]; then
            echo "No instances found matching the criteria."
            exit 1
          fi

          IFS=' ' read -r -a OBSERVER_INSTANCE_ID_ARRAY <<< "$OBSERVER_INSTANCE_IDS"

          for ID in "${OBSERVER_INSTANCE_ID_ARRAY[@]}"; do
            aws ssm send-command \
              --instance-ids "$ID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands=["curl -X POST http://localhost:9090/-/reload"] \
              --region "$AWS_REGION"
          done
