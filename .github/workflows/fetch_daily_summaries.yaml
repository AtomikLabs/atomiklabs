name: Fetch Daily Summaries CI/CD

on:
  push:
    branches:
      - prod
      - stage
      - dev
    paths:
      - "services/fetch_daily_summaries/**"
  pull_request:
    branches:
      - dev
    paths:
      - "services/fetch_daily_summaries/**"
  workflow_dispatch:

jobs:
  fetch_daily_summaries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4

      - name: Install jq
        id: install-jq
        run: sudo apt-get install jq

      - name: Read AtomikLabs config and Set Environment Variables
        id: read-config
        run: |
          config_file=".atomiklabs.json"
          echo "APP_NAME=$(jq -r '.app_name' "$config_file")" >> $GITHUB_ENV
          echo "ARXIV_BASE_URL=$(jq -r '.arxiv.arxiv_base_url' "$config_file")" >> $GITHUB_ENV
          echo "ARXIV_SUMMARY_SET=$(jq -r '.arxiv.arxiv_summary_set' "$config_file")" >> $GITHUB_ENV
          echo "AWS_REGION=$(jq -r '.infra.terraform_aws_region' "$config_file")" >> $GITHUB_ENV
          echo "BACKEND_DYNAMODB_TABLE=$(jq -r '.infra.backend_dynamodb_table' "$config_file")" >> $GITHUB_ENV
          echo "DATA_INGESTION_KEY_PREFIX=$(jq -r '.services.data_ingestion.data_ingestion_key_prefix' "$config_file")" >> $GITHUB_ENV
          echo "DATA_INGESTION_METADATA_KEY_PREFIX=$(jq -r '.metadata.data_ingestion_metadata_key_prefix' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_BUCKET=$(jq -r '.infra.infra_config_bucket' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_BUCKET_ARN=$(jq -r '.infra.infra_config_bucket_arn' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_PREFIX=$(jq -r '.infra.infra_config_prefix' "$config_file")" >> $GITHUB_ENV
          echo "MAX_RETRIES=$(jq -r '.services.data_ingestion.fetch_daily_summaries.max_retries' "$config_file")" >> $GITHUB_ENV
          echo "OUTPUTS_PREFIX=$(jq -r '.infra.outputs_prefix' "$config_file")" >> $GITHUB_ENV
          echo "SERVICE_NAME=$(jq -r '.services.data_ingestion.fetch_daily_summaries.service_name' "$config_file")" >> $GITHUB_ENV
          echo "SERVICE_VERSION=$(jq -r '.services.data_ingestion.fetch_daily_summaries.service_version' "$config_file")" >> $GITHUB_ENV
          echo "ZIP_PREFIX=$(jq -r '.services.zip_prefix' "$config_file")" >> $GITHUB_ENV
          echo "TERRAFORM_OUTPUTS_PREFIX=$(jq -r '.infra.terraform_outputs_prefix' "$config_file")" >> $GITHUB_ENV

      - name: Install node and npm
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install NPM Dependencies
        run: |
          npm install

      - name: Load Environment Variables
        uses: ./.github/actions/load-env-variables

      - name: Get Git Commit SHA
        id: get-commit-sha
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "::set-output name=commit-sha::$COMMIT_SHA"

      - name: Set AWS Credentials
        uses: ./.github/actions/set-aws-credentials
        with:
          ENVIRONMENT_NAME: ${{ env.ENV_NAME }}
          DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          PROD_AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          PROD_AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          STAGE_AWS_ACCESS_KEY_ID: ${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}
          STAGE_AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}

      - name: Set NEO4J Credentials
        run: |
          credentials_arn=""

          if [ "${{ env.ENV_NAME }}" == "dev" ]; then
            credentials_arn="${{ secrets.AWS_DEV_NEO4J_CREDENTIALS }}"
          elif [ "${{ env.ENV_NAME }}" == "prod" ]; then
            credentials_arn="${{ secrets.AWS_PROD_NEO4J_CREDENTIALS }}"
          elif [ "${{ env.ENV_NAME }}" == "stage" ]; then
            credentials_arn="${{ secrets.AWS_STAGE_NEO4J_CREDENTIALS }}"
          elif [ "${{ env.ENV_NAME }}" == "test" ]; then
            credentials_arn="${{ secrets.AWS_TEST_NEO4J_CREDENTIALS }}"
          fi
          echo "NEO4J_CREDENTIALS_ARN=$credentials_arn" >> $GITHUB_ENV

      - name: Get neo4j secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            NEO4J_RETRIEVED_CREDS, ${{ env.NEO4J_CREDENTIALS_ARN }}
            OTHER, ${{env.ENV_NAME}}/neo4j-credentials

      - name: Debug
        run: |
          echo "NEO4J_RETRIEVED_CREDS=$NEO4J_RETRIEVED_CREDS"
          echo "OTHER=$OTHER"
          username=$(echo $NEO4J_RETRIEVED_CREDS | jq -r '.username')
          password=$(echo $NEO4J_RETRIEVED_CREDS | jq -r '.password')
          echo "NEO4J_USERNAME=$username" >> $GITHUB_ENV
          echo "NEO4J_PASSWORD=$password" >> $GITHUB_ENV

      - name: more debug
        run: |
          echo "NEO4J_USERNAME=${{env.NEO4J_USERNAME}}"
          echo "NEO4J_PASSWORD=${{env.NEO4J_PASSWORD}}"
