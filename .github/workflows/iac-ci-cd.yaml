name: AtomikLabs IAC CI/CD Workflow

on:
    pull_request:
        branches:
            - dev
            - stage
            - main
        paths:
            - "**/*.yaml"
            - "**/*.yml"
    push:
        branches:
            - dev
            - stage
            - main
        paths:
            - "**/*.yaml"
            - "**/*.yml"

env:
    AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
    setup-environment:
        runs-on: ubuntu-latest
        outputs:
            env-file: ${{ steps.set-env.outputs.env-file }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Determine environment
              id: set-env
              run: |
                  if [[ $GITHUB_BASE_REF == 'dev' ]]; then
                    echo "Setting environment file for development"
                    echo "::set-output name=env-file::environments/env.dev.json"
                  elif [[ $GITHUB_BASE_REF == 'stage' ]]; then
                    echo "Setting environment file for staging"
                    echo "::set-output name=env-file::environments/env.stage.json"
                  elif [[ $GITHUB_BASE_REF == 'main' ]]; then
                    echo "Setting environment file for production"
                    echo "::set-output name=env-file::environments/env.prod.json"
                  fi

    lint-and-validate:
        needs: setup-environment
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Validate CloudFormation templates
              run: |
                  # Insert your CloudFormation validation command(s) here
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    test-deploy:
        needs: lint-and-validate
        if: github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set AWS Credentials for Test Environment
              run: |
                  echo "AWS_ACCESS_KEY_ID=${{ secrets.TEST_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
                  echo "AWS_SECRET_ACCESS_KEY=${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

            - name: Upload Substack Template to S3
              run: |
                  NETWORKING_SUBSTACK_TEMPLATE_FILE="templates/networking-substack.yaml"
                  echo "Uploading substack template: $NETWORKING_SUBSTACK_TEMPLATE_FILE"
                  DATA_LAYER_SUBSTACK_TEMPLATE_FILE="templates/data-layer-substack.yaml"
                  echo "Uploading substack template: $DATA_LAYER_SUBSTACK_TEMPLATE_FILE"
                  aws s3 cp $NETWORKING_SUBSTACK_TEMPLATE_FILE s3://atomiklabs-iac/cloudformation/networking-substack.yaml
                  aws s3 cp $DATA_LAYER_SUBSTACK_TEMPLATE_FILE s3://atomiklabs-iac/cloudformation/data-layer-substack.yaml

            - name: Deploy to Test Stack
              run: |
                  MAIN_TEMPLATE_FILE="templates/template.yaml"
                  STACK_NAME="atomiklabs-test-stack-${{ github.sha }}"
                  NETWORKING_SUBSTACK_URL="https://atomiklabs-iac.s3.${{ secrets.AWS_REGION }}.amazonaws.com/cloudformation/networking-substack.yaml"
                  DATA_LAYER_SUBSTACK_URL="https://atomiklabs-iac.s3.${{ secrets.AWS_REGION }}.amazonaws.com/cloudformation/data-layer-substack.yaml"
                  echo "Deploying main template: $MAIN_TEMPLATE_FILE"
                  echo "Networking Substack URL: $NETWORKING_SUBSTACK_URL"
                  echo "Data Layer Substack URL: $DATA_LAYER_SUBSTACK_URL"
                  aws cloudformation deploy \
                    --template-file $MAIN_TEMPLATE_FILE \
                    --stack-name $STACK_NAME \
                    --region ${{ secrets.AWS_REGION }} \
                    --no-fail-on-empty-changeset \
                    --capabilities CAPABILITY_NAMED_IAM \
                    --parameter-overrides NetworkingSubstackTemplateURL=$NETWORKING_SUBSTACK_URL DataLayerSubstackTemplateURL=$DATA_LAYER_SUBSTACK_URL

              env:
                  PARAM_FILE: ${{ needs.setup-environment.outputs.env-file }}

            - name: Capture Events on Failure
              if: failure()
              run: |
                  STACK_NAME="atomiklabs-test-stack-${{ github.sha }}"
                  echo "Fetching stack events for $STACK_NAME"
                  aws cloudformation describe-stack-events --stack-name $STACK_NAME
                  echo "Stack events fetched."

            - name: Confirm Stack Creation
              run: |
                  STACK_NAME="atomiklabs-test-stack-${{ github.sha }}"
                  aws cloudformation describe-stacks --stack-name $STACK_NAME
                  echo "Stack $STACK_NAME has been confirmed to exist."
                  

            - name: Delete Test Stack
              if: always()
              run: |
                  STACK_NAME="atomiklabs-test-stack-${{ github.sha }}"
                  echo "Deleting stack: $STACK_NAME"
                  aws cloudformation delete-stack --stack-name $STACK_NAME
                  echo "Waiting for the stack to be deleted..."
                  aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
                  if ! aws cloudformation describe-stacks --stack-name $STACK_NAME; then
                    echo "Stack $STACK_NAME has been deleted successfully."
                  else
                    echo "Stack $STACK_NAME deletion failed."
                  fi

    deploy:
        if: github.event_name == 'push' && (contains(github.ref, 'refs/heads/dev') || contains(github.ref, 'refs/heads/stage') || contains(github.ref, 'refs/heads/main'))
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set AWS Credentials and Parameter File
              run: |
                  if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
                    ENVIRONMENT_NAME="dev"
                    echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
                    echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
                  elif [[ $GITHUB_REF == 'refs/heads/stage' ]]; then
                    ENVIRONMENT_NAME="stage"
                    echo "AWS_ACCESS_KEY_ID=${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
                    echo "AWS_SECRET_ACCESS_KEY=${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
                  elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
                    ENVIRONMENT_NAME="prod"
                    echo "ENVIRONMENT_NAME=$ENVIRONMENT_NAME" >> $GITHUB_ENV
                    echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
                    echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV                    
                  fi

            - name: Upload Template to S3
              run: |
                  aws s3 cp templates/networking-substack.yaml s3://atomiklabs-iac/cloudformation/networking-substack.yaml
                  aws s3 cp templates/data-layer-substack.yaml s3://atomiklabs-iac/cloudformation/data-layer-substack.yaml


            - name: Deploy CloudFormation stack
              run: |
                  TEMPLATE_FILE="templates/template.yaml"
                  STACK_NAME="atomiklabs-${ENVIRONMENT_NAME}-stack"
                  NETWORKING_SUBSTACK_URL="https://atomiklabs-iac.s3.${{ secrets.AWS_REGION }}.amazonaws.com/cloudformation/networking-substack.yaml"
                  DATA_LAYER_SUBSTACK_URL="https://atomiklabs-iac.s3.${{ secrets.AWS_REGION }}.amazonaws.com/cloudformation/data-layer-substack.yaml"
                  echo "Deploying template: $TEMPLATE_FILE"
                  echo "Networking Substack URL: $NETWORKING_SUBSTACK_URL"
                  echo "Data Layer Substack URL: $DATA_LAYER_SUBSTACK_URL"
                  aws cloudformation deploy \
                   --template-file $TEMPLATE_FILE \
                   --stack-name $STACK_NAME \
                   --region ${{ secrets.AWS_REGION }} \
                   --capabilities CAPABILITY_NAMED_IAM \
                   --no-fail-on-empty-changeset \
                   --parameter-overrides NetworkingSubstackTemplateURL=$NETWORKING_SUBSTACK_URL DataLayerSubstackTemplateURL=$DATA_LAYER_SUBSTACK_URL

            - name: Capture Events on Failure
              if: failure()
              run: |
                  STACK_NAME="atomiklabs-${ENVIRONMENT_NAME}-stack"
                  echo "Fetching stack events for $STACK_NAME"
                  aws cloudformation describe-stack-events --stack-name $STACK_NAME
                  echo "Stack events fetched."

            - name: Confirm Stack Creation
              run: |
                  STACK_NAME="atomiklabs-${ENVIRONMENT_NAME}-stack"
                  aws cloudformation describe-stacks --stack-name $STACK_NAME
                  echo "Stack $STACK_NAME has been confirmed to exist."