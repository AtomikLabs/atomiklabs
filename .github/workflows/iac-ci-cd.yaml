name: AtomikLabs IAC CI/CD Workflow

on:
  pull_request:
    branches:
      - dev
      - stage
      - main
    paths:
      - "**/*.yaml"
      - "**/*.yml"
  push:
    branches:
      - dev
      - stage
      - main
    paths:
      - "**/*.yaml"
      - "**/*.yml"

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      env-file: ${{ steps.set-env.outputs.env-file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine environment
        id: set-env
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Setting environment file for $BRANCH_NAME"
          echo "::set-output name=env-file::environments/env.$BRANCH_NAME.json"

  lint-and-validate:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code

      - name: Validate CloudFormation templates
        run: |
          # Insert your CloudFormation validation command(s) here
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  test-deploy:
    needs: lint-and-validate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set AWS Credentials for Test Environment
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.TEST_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Upload Substack Template to S3
        run: |
          NETWORKING_SUBSTACK_TEMPLATE_FILE="templates/networking-substack.yaml"
          DATA_LAYER_SUBSTACK_TEMPLATE_FILE="templates/data-layer-substack.yaml"
          aws s3 cp $NETWORKING_SUBSTACK_TEMPLATE_FILE s3://atomiklabs-iac/cloudformation/networking-substack.yaml
          aws s3 cp $DATA_LAYER_SUBSTACK_TEMPLATE_FILE s3://atomiklabs-iac/cloudformation/data-layer-substack.yaml

      - name: Load environment parameters
        id: load-env-params
        run: |
          PARAMETERS=$(jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' environments/env.test.json)
          echo "::set-output name=params::$PARAMETERS"

      - name: Deploy to Test Stack
        run: |
          MAIN_TEMPLATE_FILE="templates/template.yaml"
          STACK_NAME="atomiklabs-test-stack-${{ github.run_number }}"
          NETWORKING_SUBSTACK_URL="https://atomiklabs-iac.s3.${AWS_DEFAULT_REGION}.amazonaws.com/cloudformation/networking-substack.yaml"
          DATA_LAYER_SUBSTACK_URL="https://atomiklabs-iac.s3.${AWS_DEFAULT_REGION}.amazonaws.com/cloudformation/data-layer-substack.yaml"
          aws cloudformation deploy \
            --template-file $MAIN_TEMPLATE_FILE \
            --stack-name $STACK_NAME \
            --region $AWS_DEFAULT_REGION \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides ${{ steps.load-env-params.outputs.params }}

      - name: Capture Events on Failure
        if: failure()
        run: |
          STACK_NAME="atomiklabs-test-stack-${{ github.run_number }}"
          aws cloudformation describe-stack-events --stack-name $STACK_NAME

      - name: Confirm Stack Creation
        run: |
          STACK_NAME="atomiklabs-test-stack-${{ github.run_number }}"
          aws cloudformation describe-stacks --stack-name $STACK_NAME

      - name: Delete Test Stack
        if: always()
        run: |
          STACK_NAME="atomiklabs-test-stack-${{ github.run_number }}"
          aws cloudformation delete-stack --stack-name $STACK_NAME
          aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
          if ! aws cloudformation describe-stacks --stack-name $STACK_NAME; then
            echo "Stack $STACK_NAME has been deleted successfully."
          else
            echo "Stack $STACK_NAME deletion failed."

  deploy:
    needs: [setup-environment, lint-and-validate]
    if: github.event_name == 'push' && (contains(github.ref, 'refs/heads/dev') || contains(github.ref, 'refs/heads/stage') || contains(github.ref, 'refs/heads/main'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set AWS Credentials and Parameter File
        run: |
          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            ENVIRONMENT_NAME="dev"
            aws configure set aws_access_key_id ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          elif [[ $GITHUB_REF == 'refs/heads/stage' ]]; then
            ENVIRONMENT_NAME="stage"
            aws configure set aws_access_key_id ${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}
          elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            ENVIRONMENT_NAME="prod"
            aws configure set aws_access_key_id ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          fi
          aws configure set default.region ${{ secrets.AWS_REGION }}
          PARAM_FILE=environments/env.$ENVIRONMENT_NAME.json

      - name: Upload Template to S3
        run: |
          aws s3 cp templates/networking-substack.yaml s3://atomiklabs-iac/cloudformation/networking-substack.yaml
          aws s3 cp templates/data-layer-substack.yaml s3://atomiklabs-iac/cloudformation/data-layer-substack.yaml

      - name: Deploy CloudFormation stack
        run: |
          TEMPLATE_FILE="templates/template.yaml"
          STACK_NAME="atomiklabs-${ENVIRONMENT_NAME}-stack"
          NETWORKING_SUBSTACK_URL="https://atomiklabs-iac.s3.${{ secrets.AWS_REGION }}.amazonaws.com/cloudformation/networking-substack.yaml"
          DATA_LAYER_SUBSTACK_URL="https://atomiklabs-iac.s3.${{ secrets.AWS_REGION }}.amazonaws.com/cloudformation/data-layer-substack.yaml"
          echo "Deploying template: $TEMPLATE_FILE"
          echo "Networking Substack URL: $NETWORKING_SUBSTACK_URL"
          echo "Data Layer Substack URL: $DATA_LAYER_SUBSTACK_URL"
          PARAMETERS=$(jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' $PARAM_FILE)
          aws cloudformation deploy \
            --template-file $TEMPLATE_FILE \
            --stack-name $STACK_NAME \
            --region ${{ secrets.AWS_REGION }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides $PARAMETERS

      - name: Capture Events on Failure
        if: failure()
        run: |
          STACK_NAME="atomiklabs-${ENVIRONMENT_NAME}-stack"
          echo "Fetching stack events for $STACK_NAME"
          aws cloudformation describe-stack-events --stack-name $STACK_NAME

      - name: Confirm Stack Creation
        run: |
          STACK_NAME="atomiklabs-${ENVIRONMENT_NAME}-stack"
          aws cloudformation describe-stacks --stack-name $STACK_NAME
          echo "Stack $STACK_NAME has been confirmed to exist."
