name: Terraform Workflow

on:
  push:
    branches:
      - prod
      - stage
      - dev
  pull_request:
    branches:
      - prod
      - stage
      - dev

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3 ls "s3://atomiklabs-infra-config-bucket" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket exists."
          else
            echo "Bucket does not exist. Creating bucket..."
            aws s3 mb "s3://atomiklabs-infra-config-bucket"
            aws s3api put-bucket-versioning --bucket atomiklabs-infra-config-bucket --versioning-configuration Status=Enabled
          fi
      
      - name: Ensure DynamoDB table exists
        run: |
          TABLE_NAME="atomiklabs-terraform-locks"
          if aws dynamodb describe-table --table-name $TABLE_NAME 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "DynamoDB table does not exist. Creating table..."
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            echo "DynamoDB table created."
          else
            echo "DynamoDB table exists."
          fi

      - name: Initialize Terraform
        run: terraform init
        working-directory: infra/backend

      - name: Terraform Plan
        run: terraform plan
        working-directory: infra/backend

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/backend

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infra/backend
