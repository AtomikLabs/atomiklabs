name: AtomikLabs Infrastructure CI/CD

on:
  push:
    branches:
      - main
      - stage
      - dev
    paths:
      - "infra/**"
      - ".github/workflows/infra.yaml"
  pull_request:
    branches:
      - dev
      - test
    paths:
      - "infra/**"
      - ".github/workflows/infra.yaml"

jobs:
  core_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install jq

      - name: Load AtomikLabs config
        id: load-config
        run: |
          config_file=".atomiklabs.yaml"
          arxiv_summary_set=$(yaml2json "$config_file" | jq -r '.data_ingestion.arxiv_summary_set')
          arxiv_summary_sets=$(yq eval '.data_ingestion.arxiv_summary_sets | join(" ")' "$config_file")
          aws_region=$(yaml2json "$config_file" | jq -r '.infra.aws_region')
          infra_config_bucket=$(yaml2json "$yaml_file" | jq -r '.infra.infra_config_bucket')
          infra_config_prefix=$(yaml2json "$yaml_file" | jq -r '.infra.infra_config_prefix')
          backend_dynamodb_table=$(yaml2json "$yaml_file" | jq -r '.infra.backend_dynamodb_table')
          outputs_prefix=$(yaml2json "$yaml_file" | jq -r '.infra.outputs_prefix')
          repo=$(yaml2json "$yaml_file" | jq -r '.infra.repo')
          echo "ARXIV_SUMMARY_SET=$arxiv_summary_set" >> $GITHUB_ENV
          echo "::set-env name=ARXIV_SUMMARY_SET::$arxiv_summary_set"
          echo "AWS_REGION=$aws_region" >> $GITHUB_ENV
          echo "INFRA_CONFIG_BUCKET=$infra_config_bucket" >> $GITHUB_ENV
          echo "INFRA_CONFIG_PREFIX=$infra_config_prefix" >> $GITHUB_ENV
          echo "BACKEND_DYNAMODB_TABLE=$backend_dynamodb_table" >> $GITHUB_ENV
          echo "OUTPUTS_PREFIX=$outputs_prefix" >> $GITHUB_ENV
          echo "REPO=$repo" >> $GITHUB_ENV

      - name: Load Environment Variables
        id: load-env-vars
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            ENV_NAME=$(echo "${{ github.base_ref }}" | tr '/' '-')
          else
            ENV_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
          fi
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
          env_file="infra/core/environments/env.$ENV_NAME.json"
          echo "ENV_FILE=$env_file" >> $GITHUB_ENV
          echo "::set-output name=env_file::$env_file"
          iam_user_name=$(jq -r '.iam_user_name' $env_file)
          echo "IAM_USER_NAME=$iam_user_name" >> $GITHUB_ENV

      - name: Set AWS Credentials Based on Environment
        run: |
          if [ "$ENV_NAME" == "prod" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          elif [ "$ENV_NAME" == "stage" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          elif [ "$ENV_NAME" == "dev" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          else
            echo "Invalid environment name: $ENV_NAME"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3 ls "s3://atomiklabs-infra-config-bucket" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket exists."
          else
            echo "Bucket does not exist. Creating bucket..."
            aws s3 mb "s3://atomiklabs-infra-config-bucket"
            aws s3api put-bucket-versioning --bucket atomiklabs-infra-config-bucket --versioning-configuration Status=Enabled
          fi

      - name: Ensure DynamoDB table exists
        run: |
          TABLE_NAME="atomiklabs-terraform-locks"
          REGION="${{ env.AWS_REGION }}"
          if aws dynamodb describe-table --table-name $TABLE_NAME 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "DynamoDB table does not exist. Creating table..."
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
              --region $REGION
            echo "DynamoDB table created."
          else
            echo "DynamoDB table exists."
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Set Terraform Variables from Environment File
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${{ env.ENV_FILE }} > env_vars
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < env_vars

      - name: Initialize Terraform
        run: terraform init -upgrade
        working-directory: ./infra/core

      - name: Validate Terraform
        run: terraform validate
        working-directory: ./infra/core

      - name: Plan Terraform
        id: plan
        run: terraform plan
        working-directory: ./infra/core

      - name: Apply Terraform
        run: |
          echo "${{ env.ENV_FILE }}"
          echo "${{ env.region }}"
          terraform apply -var-file="../../${{ env.ENV_FILE }}" -auto-approve
        working-directory: ./infra/core
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          TF_VAR_arxiv_summary_set: ${{ env.ARXIV_SUMMARY_SET }}
          TF_VAR_arxiv_summary_sets: ${{ env.ARXIV_SUMMARY_SETS }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_backend_dynamodb_table: ${{ env.BACKEND_DYNAMODB_TABLE }}
          TF_VAR_infra_config_bucket: ${{ env.INFRA_CONFIG_BUCKET }}
          TF_VAR_infra_config_prefix: ${{ env.INFRA_CONFIG_PREFIX }}
          TF_VAR_outputs_prefix: ${{ env.OUTPUTS_PREFIX }}
          TF_VAR_repo: ${{ env.REPO }}

      - name: Save Terraform Outputs
        run: |
          # Generate Terraform outputs as a JSON file
          terraform output -json > terraform_outputs.json
          # Upload Terraform outputs to S3 bucket with environment-based naming
          aws s3 cp terraform_outputs.json s3://atomiklabs-infra-config-bucket/terraform-outputs/${{ env.ENV_NAME }}-terraform-outputs.json
        working-directory: ./infra/core
