name: AtomikLabs Infrastructure CI/CD

on:
  push:
    branches:
      - main
      - stage
      - dev
  pull_request:
    branches:
      - dev
      - test-branch

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      env-file: ${{ steps.set-env.outputs.env-file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Base branch of the PR: ${{ github.base_ref }}"
            BRANCH_NAME="${{ github.base_ref }}"
          else
            echo "Push to branch: ${GITHUB_REF#refs/heads/}"
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi

          if [[ $BRANCH_NAME == 'dev' ]]; then
            echo "Development environment selected"
            echo "env-file=infra/environments/env.dev.json" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME == 'stage' ]]; then
            echo "Staging environment selected"
            echo "env-file=infra/environments/env.stage.json" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME == 'main' ]]; then
            echo "Production environment selected"
            echo "env-file=infra/environments/env.prod.json" >> $GITHUB_ENV
          else
            echo "No matching environment for branch $BRANCH_NAME"
          fi

      - name: Echo environment file path
        run: |
          echo "Environment file path: ${{ env.env-file }}"
          if [[ -z "${{ env.env-file }}" ]]; then
            echo "Environment file path is empty"
          else
            echo "Environment file path is set"
          fi

      - name: Set environment variables from file
        if: env.env-file != ''
        run: |
          jq -r 'to_entries | .[] | "\(.key)=\(.value)"' "${{ env.env-file }}" >> $GITHUB_ENV

  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3 ls "s3://atomiklabs-infra-config-bucket" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket exists."
          else
            echo "Bucket does not exist. Creating bucket..."
            aws s3 mb "s3://atomiklabs-infra-config-bucket"
            aws s3api put-bucket-versioning --bucket atomiklabs-infra-config-bucket --versioning-configuration Status=Enabled
          fi

      - name: Ensure DynamoDB table exists
        run: |
          TABLE_NAME="atomiklabs-terraform-locks"
          REGION="${{ secrets.AWS_REGION }}"
          if aws dynamodb describe-table --table-name $TABLE_NAME 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "DynamoDB table does not exist. Creating table..."
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
              --region $REGION
            echo "DynamoDB table created."
          else
            echo "DynamoDB table exists."
          fi

      - name: Initialize Terraform
        run: terraform init
        working-directory: infra/backend

      - name: Terraform Plan
        run: terraform plan
        working-directory: infra/backend

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/backend

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infra/backend

  deploy-infra:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="${{ env.env-file}}"
        working-directory: ./infra
