name: Infra CI/CD

on:
  push:
    branches:
      - main
      - stage
      - dev
    paths:
      - "infra/core/**"
      - ".github/workflows/infra.yaml"
  pull_request:
    branches:
      - dev
      - test
    paths:
      - "infra/core/**"
      - ".github/workflows/infra.yaml"
  workflow_dispatch:

jobs:
  core_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install jq

      - name: Read AtomikLabs config and Set Environment Variables
        run: |
          config_file=".atomiklabs.json"
          echo "AWS_REGION=$(jq -r '.infra.terraform_aws_region' "$config_file")" >> $GITHUB_ENV
          echo "BACKEND_DYNAMODB_TABLE=$(jq -r '.infra.backend_dynamodb_table' "$config_file")" >> $GITHUB_ENV
          echo "BASTION_HOST_KEY_PAIR_NAME=$(jq -r '.networking.bastion_host_key_pair_name' "$config_file")" >> $GITHUB_ENV
          echo "DATA_INGESTION_KEY_PREFIX=$(jq -r '.data_ingestion.data_ingestion_key_prefix' "$config_file")" >> $GITHUB_ENV
          echo "DATA_INGESTION_METADATA_KEY_PREFIX=$(jq -r '.metadata.data_ingestion_metadata_key_prefix' "$config_file")" >> $GITHUB_ENV
          echo "DEFAULT_AMI_ID=$(jq -r '.infra.default_ami_id' "$config_file")" >> $GITHUB_ENV
          echo "ETL_KEY_PREFIX=$(jq -r '.etl.etl_key_prefix' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_BUCKET=$(jq -r '.infra.infra_config_bucket' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_BUCKET_ARN=$(jq -r '.infra.infra_config_bucket_arn' "$config_file")" >> $GITHUB_ENV
          echo "INFRA_CONFIG_PREFIX=$(jq -r '.infra.infra_config_prefix' "$config_file")" >> $GITHUB_ENV
          echo "NEO4J_AMI_ID=$(jq -r '.data_management.neo4j.ami_id' "$config_file")" >> $GITHUB_ENV
          echo "NEO4J_INSTANCE_TYPE=$(jq -r '.data_management.neo4j.instance_type' "$config_file")" >> $GITHUB_ENV
          echo "NEO4J_KEY_PAIR_NAME=$(jq -r '.data_management.neo4j.key_pair_name' "$config_file")" >> $GITHUB_ENV
          echo "NEO4J_RESOURCE_PREFIX=$(jq -r '.data_management.neo4j.resource_prefix' "$config_file")" >> $GITHUB_ENV
          echo "REPO=$(jq -r '.infra.repo' "$config_file")" >> $GITHUB_ENV
          echo "TERRAFORM_OUTPUTS_PREFIX=$(jq -r '.infra.terraform_outputs_prefix' "$config_file")" >> $GITHUB_ENV

      - name: Install node and npm
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install NPM Dependencies
        run: |
          npm install

      - name: Load Environment Variables
        uses: ./.github/actions/load-env-variables

      - name: Set AWS Credentials
        uses: ./.github/actions/set-aws-credentials
        with:
          ENVIRONMENT_NAME: ${{ env.ENV_NAME }}
          PROD_AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          PROD_AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          STAGE_AWS_ACCESS_KEY_ID: ${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}
          STAGE_AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}
          DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}

      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3 ls "s3://${INFRA_CONFIG_BUCKET}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket exists."
          else
            echo "Bucket does not exist. Creating bucket..."
            aws s3 mb "s3://${INFRA_CONFIG_BUCKET}"
            aws s3api put-bucket-versioning --bucket ${INFRA_CONFIG_BUCKET} --versioning-configuration Status=Enabled
          fi

      - name: Ensure DynamoDB table exists
        run: |
          TABLE_NAME="atomiklabs-terraform-locks"
          REGION="${{ env.AWS_REGION }}"
          if aws dynamodb describe-table --table-name $TABLE_NAME 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "DynamoDB table does not exist. Creating table..."
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region $REGION
            echo "DynamoDB table created."
          else
            echo "DynamoDB table exists."
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Set Terraform Variables from Environment File
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${{ env.ENV_FILE }} > env_vars
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < env_vars

      - name: Initialize Terraform
        run: terraform init -upgrade
        working-directory: ./infra/core

      - name: Validate Terraform
        run: terraform validate
        working-directory: ./infra/core

      - name: Plan Terraform
        id: plan
        run: terraform plan -var-file="../../${{ env.ENV_FILE }}"
        working-directory: ./infra/core
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_backend_dynamodb_table: ${{ env.BACKEND_DYNAMODB_TABLE }}
          TF_VAR_bastion_host_key_pair_name: ${{ env.BASTION_HOST_KEY_PAIR_NAME }}
          TF_VAR_data_ingestion_metadata_key_prefix: ${{ env.DATA_INGESTION_METADATA_KEY_PREFIX }}
          TF_VAR_default_ami_id: ${{ env.DEFAULT_AMI_ID }}
          TF_VAR_home_ip: ${{ secrets.HOME_IP }}
          TF_VAR_infra_config_bucket: ${{ env.INFRA_CONFIG_BUCKET }}
          TF_VAR_infra_config_bucket_arn: ${{ env.INFRA_CONFIG_BUCKET_ARN }}
          TF_VAR_infra_config_prefix: ${{ env.INFRA_CONFIG_PREFIX }}
          TF_VAR_neo4j_ami_id: ${{ env.NEO4J_AMI_ID }}
          TF_VAR_neo4j_instance_type: ${{ env.NEO4J_INSTANCE_TYPE }}
          TF_VAR_neo4j_key_pair_name: ${{ env.NEO4J_KEY_PAIR_NAME }}
          TF_VAR_neo4j_resource_prefix: ${{ env.NEO4J_RESOURCE_PREFIX }}
          TF_VAR_repo: ${{ env.REPO }}
          TF_VAR_terraform_outputs_prefix: ${{ env.TERRAFORM_OUTPUTS_PREFIX }}

      - name: Apply Terraform
        run: |
          echo "${{ env.ENV_FILE }}"
          echo "${{ env.AWS_REGION }}"
          terraform apply -var-file="../../${{ env.ENV_FILE }}" -auto-approve
        working-directory: ./infra/core
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_backend_dynamodb_table: ${{ env.BACKEND_DYNAMODB_TABLE }}
          TF_VAR_bastion_host_key_pair_name: ${{ env.BASTION_HOST_KEY_PAIR_NAME }}
          TF_VAR_data_ingestion_metadata_key_prefix: ${{ env.DATA_INGESTION_METADATA_KEY_PREFIX }}
          TF_VAR_default_ami_id: ${{ env.DEFAULT_AMI_ID }}
          TF_VAR_home_ip: ${{ secrets.HOME_IP }}
          TF_VAR_infra_config_bucket: ${{ env.INFRA_CONFIG_BUCKET }}
          TF_VAR_infra_config_bucket_arn: ${{ env.INFRA_CONFIG_BUCKET_ARN }}
          TF_VAR_infra_config_prefix: ${{ env.INFRA_CONFIG_PREFIX }}
          TF_VAR_neo4j_ami_id: ${{ env.NEO4J_AMI_ID }}
          TF_VAR_neo4j_instance_type: ${{ env.NEO4J_INSTANCE_TYPE }}
          TF_VAR_neo4j_key_pair_name: ${{ env.NEO4J_KEY_PAIR_NAME }}
          TF_VAR_neo4j_resource_prefix: ${{ env.NEO4J_RESOURCE_PREFIX }}
          TF_VAR_repo: ${{ env.REPO }}
          TF_VAR_terraform_outputs_prefix: ${{ env.TERRAFORM_OUTPUTS_PREFIX }}

      - name: Save Terraform Outputs
        run: |
          terraform output -json > terraform_outputs.json
          aws s3 cp terraform_outputs.json s3://${{ env.INFRA_CONFIG_BUCKET }}/terraform/${{ env.ENV_NAME }}-${{ env.TERRAFORM_OUTPUTS_PREFIX }}.json
        working-directory: ./infra/core

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform_outputs
          path: ./infra/core/terraform_outputs.json
