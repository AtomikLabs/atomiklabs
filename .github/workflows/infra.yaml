name: AtomikLabs Infrastructure CI/CD

on:
  push:
    branches:
      - main
      - stage
      - dev
    paths:
      - "infra/**"
  pull_request:
    branches:
      - dev
      - test-branch
    paths:
      - "infra/**"

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3 ls "s3://atomiklabs-infra-config-bucket" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket exists."
          else
            echo "Bucket does not exist. Creating bucket..."
            aws s3 mb "s3://atomiklabs-infra-config-bucket"
            aws s3api put-bucket-versioning --bucket atomiklabs-infra-config-bucket --versioning-configuration Status=Enabled
          fi

      - name: Ensure DynamoDB table exists
        run: |
          TABLE_NAME="atomiklabs-terraform-locks"
          REGION="${{ secrets.AWS_REGION }}"
          if aws dynamodb describe-table --table-name $TABLE_NAME 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "DynamoDB table does not exist. Creating table..."
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
              --region $REGION
            echo "DynamoDB table created."
          else
            echo "DynamoDB table exists."
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Load Environment Variables
        id: load-env-vars
        run: |
          env_file="infra/environments/env.${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}.json"
          echo "ENV_FILE=$env_file" >> $GITHUB_ENV
          echo "::set-output name=env_file::$env_file"
          echo "REGION=${{ secrets.AWS_REGION }}"
          echo "NAME=${{ env.name }}"

      - name: Install jq
        run: sudo apt-get install jq

      - name: Set Terraform Variables from Environment File
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${{ env.ENV_FILE }} > env_vars
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < env_vars

      - name: Install kubectl and AWS CLI
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin
          sudo apt-get update
          sudo apt-get install awscli -y

      - name: Configure Kubernetes contexts
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ env.name}}
          kubectl config use-context atomiklabs-eks-cluster

      - name: Initialize Terraform
        run: terraform init -upgrade
        working-directory: ./infra

      - name: Apply Terraform Modules Sequentially
        run: |
          targets=("module.vpc" "module.eks" "module.ebs_csi_driver_irsa" "module.eks_blueprints_addons" "module.eks_data_addons")
          for target in "${targets[@]}"; do
            echo "Applying module $target..."
            terraform apply -target="$target" -auto-approve
          done
          echo "Applying remaining resources..."
          terraform apply -var-file="../${{ env.ENV_FILE }}" -auto-approve
        working-directory: ./infra
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          TF_VAR_region: ${{ env.region }}
